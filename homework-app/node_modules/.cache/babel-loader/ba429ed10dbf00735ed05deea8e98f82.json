{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\annegrea\\\\Downloads\\\\homework tsc\\\\homework-app\\\\src\\\\components\\\\pages\\\\login\\\\Login.tsx\";\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport \"./login.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialValues = {\n  email: \"\",\n  password: \"\"\n};\nconst regexPass = /^(?=.*[a-z])(?=.*[A-Z])(?=.*d)[a-zA-Zd]$/;\nconst LoginValidation = Yup.object().shape({\n  email: Yup.string().email().required(),\n  password: Yup.string().required(\"Please Enter your password\").min(8, \"Password is too short - should be 8 chars minimum.\").matches(/[A-Z]+/, \"One uppercase character\").matches(/[a-z]+/, \"One lowercase character\").matches(/[a@$!%#?&]+/, \"One special character\").matches(/\\d+/, \"One number\") // .matches(\n  //   /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/,\n  //   \"Must Contain 8 Characters, One Uppercase, One Lowercase, One Number and one special case Character\"\n  // ),\n\n});\n\nconst Login = () => /*#__PURE__*/_jsxDEV(Formik, {\n  initialValues: initialValues,\n  validationSchema: LoginValidation,\n  onSubmit: (values, _ref) => {\n    let {\n      setSubmitting\n    } = _ref;\n    setTimeout(() => {\n      alert(JSON.stringify(values, null, 2));\n      setSubmitting(false);\n    }, 500);\n  },\n  children: _ref2 => {\n    let {\n      errors,\n      touched,\n      isValid\n    } = _ref2;\n    // console.log(props)\n    return /*#__PURE__*/_jsxDEV(Form, {\n      className: \"login-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inputField\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"formField\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \" Email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Field, {\n            id: \"email\",\n            name: \"email\" // type='text'\n            ,\n            placeholder: \"Enter your email\",\n            autoComplete: \"off\" // value={values.email}\n            ,\n            errors: errors,\n            touched: touched\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n          name: \"email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inputField\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"formField\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \" Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Field, {\n            id: \"password\",\n            name: \"password\" // type='password'\n            ,\n            placeholder: \"Enter your password\",\n            autoComplete: \"off\" // value={values.password}\n            ,\n            errors: errors,\n            touched: touched\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n          name: \"password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !isValid,\n        children: \"Signin\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this);\n  }\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 36,\n  columnNumber: 3\n}, this);\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["C:/Users/annegrea/Downloads/homework tsc/homework-app/src/components/pages/login/Login.tsx"],"names":["Formik","Form","Field","ErrorMessage","Yup","initialValues","email","password","regexPass","LoginValidation","object","shape","string","required","min","matches","Login","values","setSubmitting","setTimeout","alert","JSON","stringify","errors","touched","isValid"],"mappings":"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","sourcesContent":["import {\r\n  Formik,\r\n  Form,\r\n  Field,\r\n  FormikHelpers,\r\n  ErrorMessage,\r\n  FormikErrors,\r\n  FormikTouched,\r\n} from \"formik\"\r\nimport * as Yup from \"yup\"\r\nimport \"./login.css\"\r\n\r\ninterface FormValues {\r\n  email: string\r\n  password: string\r\n}\r\nconst initialValues: FormValues = { email: \"\", password: \"\" }\r\nconst regexPass = /^(?=.*[a-z])(?=.*[A-Z])(?=.*d)[a-zA-Zd]$/\r\n\r\nconst LoginValidation = Yup.object().shape({\r\n  email: Yup.string().email().required(),\r\n  password: Yup.string()\r\n    .required(\"Please Enter your password\")\r\n    .min(8, \"Password is too short - should be 8 chars minimum.\")\r\n    .matches(/[A-Z]+/, \"One uppercase character\")\r\n    .matches(/[a-z]+/, \"One lowercase character\")\r\n    .matches(/[a@$!%#?&]+/, \"One special character\")\r\n    .matches(/\\d+/, \"One number\"),\r\n  // .matches(\r\n  //   /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/,\r\n  //   \"Must Contain 8 Characters, One Uppercase, One Lowercase, One Number and one special case Character\"\r\n  // ),\r\n})\r\n\r\nconst Login = () => (\r\n  <Formik\r\n    initialValues={initialValues}\r\n    validationSchema={LoginValidation}\r\n    onSubmit={(\r\n      values: FormValues,\r\n      { setSubmitting }: FormikHelpers<FormValues>\r\n    ) => {\r\n      setTimeout(() => {\r\n        alert(JSON.stringify(values, null, 2))\r\n        setSubmitting(false)\r\n      }, 500)\r\n    }}\r\n  >\r\n    {({ errors, touched, isValid }) => {\r\n      // console.log(props)\r\n\r\n      return (\r\n        <Form className='login-container'>\r\n          <div className='inputField'>\r\n            <div className='formField'>\r\n              <label> Email</label>\r\n\r\n              <Field\r\n                id='email'\r\n                name='email'\r\n                // type='text'\r\n                placeholder='Enter your email'\r\n                autoComplete='off'\r\n                // value={values.email}\r\n                errors={errors}\r\n                touched={touched}\r\n              />\r\n            </div>\r\n            <ErrorMessage name='email' />\r\n          </div>\r\n          <div className='inputField'>\r\n            <div className='formField'>\r\n              <label> Password</label>\r\n              <Field\r\n                id='password'\r\n                name='password'\r\n                // type='password'\r\n                placeholder='Enter your password'\r\n                autoComplete='off'\r\n                // value={values.password}\r\n                errors={errors}\r\n                touched={touched}\r\n              />\r\n            </div>\r\n            <ErrorMessage name='password' />\r\n          </div>\r\n          <button disabled={!isValid}>Signin</button>\r\n        </Form>\r\n      )\r\n    }}\r\n  </Formik>\r\n)\r\n\r\nexport default Login\r\n"]},"metadata":{},"sourceType":"module"}