{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { tasksEntityInitialState } from \"./taskInitial.state\";\nimport { taskApi } from \"./tasks-api\";\nconst taskSlice = createSlice({\n  name: \"task\",\n  initialState: tasksEntityInitialState,\n  reducers: {\n    setTasks(state, action) {\n      state.tasks = action.payload;\n    },\n\n    resetTasksEnity(state) {\n      state.tasks = tasksEntityInitialState.tasks;\n    }\n\n  },\n  extraReducers: builder => {\n    builder.addMatcher(taskApi.endpoints.getTasks.matchFulfilled, //Payload action type = server returned type\n    (state, action) => {\n      state.tasks = action.payload;\n      console.log(state.tasks);\n    });\n    builder.addMatcher(taskApi.endpoints.addTask.matchFulfilled, (state, action) => {\n      state.tasks.push(action.payload);\n      console.log(state.tasks);\n    });\n    builder.addMatcher(taskApi.endpoints.deleteTask.matchFulfilled, (state, action) => {\n      const {\n        id\n      } = action.payload;\n      const index = state.tasks.find();\n      state.tasks = state.tasks.splice(index, 1); // state.tasks = state.tasks.filter((task) => task.id !== action.payload)\n      // console.log(state.tasks)\n    });\n    builder.addMatcher(taskApi.endpoints.updateTask.matchFulfilled, (state, action) => {\n      state.tasks = state.tasks.map(task => task.id === action.payload.id ? action.payload : task);\n    });\n  }\n});\nexport const {\n  setTasks,\n  resetTasksEnity\n} = taskSlice.actions;\nexport default taskSlice.reducer;","map":{"version":3,"sources":["C:/Users/annegrea/Downloads/homework tsc/homework-app/src/state/task/task.reducer.ts"],"names":["createSlice","tasksEntityInitialState","taskApi","taskSlice","name","initialState","reducers","setTasks","state","action","tasks","payload","resetTasksEnity","extraReducers","builder","addMatcher","endpoints","getTasks","matchFulfilled","console","log","addTask","push","deleteTask","id","index","find","splice","updateTask","map","task","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA2C,kBAA3C;AAIA,SAASC,uBAAT,QAAwC,qBAAxC;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,MAAMC,SAAS,GAAGH,WAAW,CAAC;AAC5BI,EAAAA,IAAI,EAAE,MADsB;AAE5BC,EAAAA,YAAY,EAAEJ,uBAFc;AAG5BK,EAAAA,QAAQ,EAAE;AACRC,IAAAA,QAAQ,CAACC,KAAD,EAA8BC,MAA9B,EAA6D;AACnED,MAAAA,KAAK,CAACE,KAAN,GAAcD,MAAM,CAACE,OAArB;AACD,KAHO;;AAIRC,IAAAA,eAAe,CAACJ,KAAD,EAA8B;AAC3CA,MAAAA,KAAK,CAACE,KAAN,GAAcT,uBAAuB,CAACS,KAAtC;AACD;;AANO,GAHkB;AAW5BG,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CAACC,UAAR,CACEb,OAAO,CAACc,SAAR,CAAkBC,QAAlB,CAA2BC,cAD7B,EAEE;AACA,KAACV,KAAD,EAA8BC,MAA9B,KAAgE;AAC9DD,MAAAA,KAAK,CAACE,KAAN,GAAcD,MAAM,CAACE,OAArB;AACAQ,MAAAA,OAAO,CAACC,GAAR,CAAYZ,KAAK,CAACE,KAAlB;AACD,KANH;AAQAI,IAAAA,OAAO,CAACC,UAAR,CACEb,OAAO,CAACc,SAAR,CAAkBK,OAAlB,CAA0BH,cAD5B,EAEE,CAACV,KAAD,EAA8BC,MAA9B,KAA8D;AAC5DD,MAAAA,KAAK,CAACE,KAAN,CAAYY,IAAZ,CAAiBb,MAAM,CAACE,OAAxB;AACAQ,MAAAA,OAAO,CAACC,GAAR,CAAYZ,KAAK,CAACE,KAAlB;AACD,KALH;AAOAI,IAAAA,OAAO,CAACC,UAAR,CACEb,OAAO,CAACc,SAAR,CAAkBO,UAAlB,CAA6BL,cAD/B,EAEE,CAACV,KAAD,EAAQC,MAAR,KAAwC;AACtC,YAAM;AAAEe,QAAAA;AAAF,UAASf,MAAM,CAACE,OAAtB;AACA,YAAMc,KAAK,GAAGjB,KAAK,CAACE,KAAN,CAAYgB,IAAZ,EAAd;AACAlB,MAAAA,KAAK,CAACE,KAAN,GAAcF,KAAK,CAACE,KAAN,CAAYiB,MAAZ,CAAmBF,KAAnB,EAA0B,CAA1B,CAAd,CAHsC,CAItC;AACA;AACD,KARH;AAUAX,IAAAA,OAAO,CAACC,UAAR,CACEb,OAAO,CAACc,SAAR,CAAkBY,UAAlB,CAA6BV,cAD/B,EAEE,CAACV,KAAD,EAAQC,MAAR,KAAwC;AACtCD,MAAAA,KAAK,CAACE,KAAN,GAAcF,KAAK,CAACE,KAAN,CAAYmB,GAAZ,CAAiBC,IAAD,IAC5BA,IAAI,CAACN,EAAL,KAAYf,MAAM,CAACE,OAAP,CAAea,EAA3B,GAAgCf,MAAM,CAACE,OAAvC,GAAiDmB,IADrC,CAAd;AAGD,KANH;AAQD;AA7C2B,CAAD,CAA7B;AAgDA,OAAO,MAAM;AAAEvB,EAAAA,QAAF;AAAYK,EAAAA;AAAZ,IAAgCT,SAAS,CAAC4B,OAAhD;AACP,eAAe5B,SAAS,CAAC6B,OAAzB","sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\"\r\n\r\nimport { Task } from \"../../common/interface/Task\"\r\nimport { TasksEntityInterface } from \"../root.interface\"\r\nimport { tasksEntityInitialState } from \"./taskInitial.state\"\r\nimport { taskApi } from \"./tasks-api\"\r\n\r\nconst taskSlice = createSlice({\r\n  name: \"task\",\r\n  initialState: tasksEntityInitialState,\r\n  reducers: {\r\n    setTasks(state: TasksEntityInterface, action: PayloadAction<Task[]>) {\r\n      state.tasks = action.payload\r\n    },\r\n    resetTasksEnity(state: TasksEntityInterface) {\r\n      state.tasks = tasksEntityInitialState.tasks\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addMatcher(\r\n      taskApi.endpoints.getTasks.matchFulfilled,\r\n      //Payload action type = server returned type\r\n      (state: TasksEntityInterface, action: PayloadAction<Task[]>) => {\r\n        state.tasks = action.payload\r\n        console.log(state.tasks)\r\n      }\r\n    )\r\n    builder.addMatcher(\r\n      taskApi.endpoints.addTask.matchFulfilled,\r\n      (state: TasksEntityInterface, action: PayloadAction<Task>) => {\r\n        state.tasks.push(action.payload)\r\n        console.log(state.tasks)\r\n      }\r\n    )\r\n    builder.addMatcher(\r\n      taskApi.endpoints.deleteTask.matchFulfilled,\r\n      (state, action: PayloadAction<Task>) => {\r\n        const { id } = action.payload\r\n        const index = state.tasks.find()\r\n        state.tasks = state.tasks.splice(index, 1)\r\n        // state.tasks = state.tasks.filter((task) => task.id !== action.payload)\r\n        // console.log(state.tasks)\r\n      }\r\n    )\r\n    builder.addMatcher(\r\n      taskApi.endpoints.updateTask.matchFulfilled,\r\n      (state, action: PayloadAction<Task>) => {\r\n        state.tasks = state.tasks.map((task) =>\r\n          task.id === action.payload.id ? action.payload : task\r\n        )\r\n      }\r\n    )\r\n  },\r\n})\r\n\r\nexport const { setTasks, resetTasksEnity } = taskSlice.actions\r\nexport default taskSlice.reducer\r\n"]},"metadata":{},"sourceType":"module"}