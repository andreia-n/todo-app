{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\annegrea\\\\Downloads\\\\homework tsc\\\\homework-app\\\\src\\\\components\\\\pages\\\\login\\\\Login.tsx\";\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\nimport \"./login.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialValues = {\n  email: \"\",\n  password: \"\"\n}; // const LoginValidation = Yup.object().shape({\n//   email: Yup.string().email().required(),\n//   password: Yup.string()\n//     .required(\"Please enter your password\")\n//     .min(8, \"Password is too short - should be 8 chars minimum.\")\n//     .matches(/[A-Z]+/, \"One uppercase character\")\n//     .matches(/[a-z]+/, \"One lowercase character\")\n//     .matches(/[a@$!%#?&]+/, \"One special character\")\n//     .matches(/\\d+/, \"One number\"),\n// })\n\nconst validate = values => {\n  const errors = {};\n\n  if (!values.email) {\n    errors.email = \"Required\";\n  } else if (values.email.length > 15) {\n    errors.email = \"Must be 15 characters or less\";\n  }\n\n  if (!values.password) {\n    errors.password = \"Required\";\n  } else if (values.password.length > 20) {\n    errors.password = \"Must be 20 characters or less\";\n  }\n\n  if (!values.email) {\n    errors.email = \"Required\";\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = \"Invalid email address\";\n  }\n\n  return errors;\n};\n\nconst renderError = message => /*#__PURE__*/_jsxDEV(\"p\", {\n  className: \"error-mesage\",\n  children: message\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 52,\n  columnNumber: 3\n}, this);\n\nconst Login = () => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"login-container\",\n  children: /*#__PURE__*/_jsxDEV(Formik, {\n    initialValues: initialValues,\n    validationSchema: validate,\n    onSubmit: (values, _ref) => {\n      let {\n        setSubmitting\n      } = _ref;\n      setTimeout(() => {\n        alert(JSON.stringify(values, null, 2));\n        setSubmitting(false);\n      }, 500);\n    },\n    children: _ref2 => {\n      let {\n        errors,\n        touched,\n        isValid\n      } = _ref2;\n      console.log(errors.password);\n      return /*#__PURE__*/_jsxDEV(Form, {\n        className: \"login-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"inputField\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"formField\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \" Email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Field, {\n              id: \"email\",\n              name: \"email\" // type='text'\n              ,\n              placeholder: \"Enter your email\",\n              autoComplete: \"off\" // value={values.email}\n              ,\n              errors: errors,\n              touched: touched\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"inputField\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"formField\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \" Password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Field, {\n              id: \"password\",\n              name: \"password\",\n              type: \"password\",\n              placeholder: \"Enter your password\",\n              autoComplete: \"off\" // value={values.password}\n              ,\n              errors: errors,\n              touched: touched\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n          name: \"password\",\n          render: renderError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }, this), errors && /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            color: \"red\"\n          },\n          children: [\" \", errors.password, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 24\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          disabled: !isValid,\n          children: \"Signin\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 55,\n  columnNumber: 3\n}, this);\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["C:/Users/annegrea/Downloads/homework tsc/homework-app/src/components/pages/login/Login.tsx"],"names":["Formik","Form","Field","ErrorMessage","initialValues","email","password","validate","values","errors","length","test","renderError","message","Login","setSubmitting","setTimeout","alert","JSON","stringify","touched","isValid","console","log","color"],"mappings":"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","sourcesContent":["import {\r\n  Formik,\r\n  Form,\r\n  Field,\r\n  FormikHelpers,\r\n  ErrorMessage,\r\n  FormikErrors,\r\n  FormikTouched,\r\n} from \"formik\"\r\nimport * as Yup from \"yup\"\r\nimport \"./login.css\"\r\n\r\ninterface FormValues {\r\n  email: string\r\n  password: string\r\n}\r\nconst initialValues: FormValues = { email: \"\", password: \"\" }\r\n\r\n// const LoginValidation = Yup.object().shape({\r\n//   email: Yup.string().email().required(),\r\n//   password: Yup.string()\r\n//     .required(\"Please enter your password\")\r\n//     .min(8, \"Password is too short - should be 8 chars minimum.\")\r\n//     .matches(/[A-Z]+/, \"One uppercase character\")\r\n//     .matches(/[a-z]+/, \"One lowercase character\")\r\n//     .matches(/[a@$!%#?&]+/, \"One special character\")\r\n//     .matches(/\\d+/, \"One number\"),\r\n// })\r\nconst validate = (values: FormValues) => {\r\n  const errors: FormikErrors<FormValues> = {}\r\n  if (!values.email) {\r\n    errors.email = \"Required\"\r\n  } else if (values.email.length > 15) {\r\n    errors.email = \"Must be 15 characters or less\"\r\n  }\r\n\r\n  if (!values.password) {\r\n    errors.password = \"Required\"\r\n  } else if (values.password.length > 20) {\r\n    errors.password = \"Must be 20 characters or less\"\r\n  }\r\n\r\n  if (!values.email) {\r\n    errors.email = \"Required\"\r\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n    errors.email = \"Invalid email address\"\r\n  }\r\n\r\n  return errors\r\n}\r\nconst renderError = (message: string) => (\r\n  <p className='error-mesage'>{message}</p>\r\n)\r\nconst Login = () => (\r\n  <div className='login-container'>\r\n    <Formik\r\n      initialValues={initialValues}\r\n      validationSchema={validate}\r\n      onSubmit={(\r\n        values: FormValues,\r\n        { setSubmitting }: FormikHelpers<FormValues>\r\n      ) => {\r\n        setTimeout(() => {\r\n          alert(JSON.stringify(values, null, 2))\r\n          setSubmitting(false)\r\n        }, 500)\r\n      }}\r\n    >\r\n      {({ errors, touched, isValid }) => {\r\n        console.log(errors.password)\r\n\r\n        return (\r\n          <Form className='login-form'>\r\n            <div className='inputField'>\r\n              <div className='formField'>\r\n                <label> Email</label>\r\n\r\n                <Field\r\n                  id='email'\r\n                  name='email'\r\n                  // type='text'\r\n                  placeholder='Enter your email'\r\n                  autoComplete='off'\r\n                  // value={values.email}\r\n                  errors={errors}\r\n                  touched={touched}\r\n                />\r\n              </div>\r\n              {/* <ErrorMessage name='email' render={renderError} /> */}\r\n            </div>\r\n            <div className='inputField'>\r\n              <div className='formField'>\r\n                <label> Password</label>\r\n                <Field\r\n                  id='password'\r\n                  name='password'\r\n                  type='password'\r\n                  placeholder='Enter your password'\r\n                  autoComplete='off'\r\n                  // value={values.password}\r\n                  errors={errors}\r\n                  touched={touched}\r\n                />\r\n              </div>\r\n            </div>\r\n            <ErrorMessage name='password' render={renderError} />\r\n\r\n            {errors && <p style={{ color: \"red\" }}> {errors.password} </p>}\r\n\r\n            <button disabled={!isValid}>Signin</button>\r\n          </Form>\r\n        )\r\n      }}\r\n    </Formik>\r\n  </div>\r\n)\r\n\r\nexport default Login\r\n"]},"metadata":{},"sourceType":"module"}